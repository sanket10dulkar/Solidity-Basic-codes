// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract ConstructorIntro {
    address public owner;
    uint public x;

    constructor(uint _x) {
        // Here the owner is set to the caller
        owner = msg.sender;
        x = _x;
    }
}


// it is called when contract is deployed for first time. Used to set the initail variables like msg.sender.

//Initializing Parent Contracts in the Inheritance List
```solidity
contract B is X(“Input to X”), Y(“Input to Y”) {
// …
}
```

or

```solidity
contract C is X, Y {
constructor(string memory _name, string memory _text) X(_name) Y(_text) {
// …
}
}
```


In contract `D`, the constructors are called in the following order: `X` constructor, `Y` constructor, and finally, the `D` constructor itself.

```solidity
contract D is X, Y {
constructor() X(“X was called”) Y(“Y was called”) {
// …
}
}
```

In contrast, in contract `E`, the order of constructor calls is reversed compared to the order in the contract definition. The `Y` constructor is called before the `X` constructor.

```solidity
contract E is X, Y {
constructor() Y(“Y was called”) X(“X was called”) {
// …
}
}
```
